from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes,
    ConversationHandler, CallbackQueryHandler
)
from sqlalchemy import create_engine, Column, Integer, String, Float
from sqlalchemy.orm import declarative_base, sessionmaker
from datetime import datetime
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
Base = declarative_base()
engine = create_engine("postgresql://tariff_db_g7eb_user:K73qHQVHxpqF5SM71Li3OzhVblBNlmve@dpg-d1digvbe5dus73djsp1g-a/tariff_db_g7eb")
Session = sessionmaker(bind=engine)
session = Session()

class Record(Base):
    __tablename__ = "record"
    id = Column(Integer, primary_key=True)
    date = Column(String)
    user = Column(String)
    cur = Column(Float)
    new = Column(Float)
    cost = Column(Float)
    period = Column(Integer)
    payback = Column(String)
    economy = Column(Float)

Base.metadata.create_all(engine)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
CUR, NEW, COST, PERIOD = range(4)
CHANNEL_ID = "@F_S_Ta"

# --- –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
check_keyboard = InlineKeyboardMarkup(
    [[InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]]
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n"
        "https://t.me/F_S_Ta\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=check_keyboard
    )
    return ConversationHandler.END

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ---
async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        logging.info(f"{user_id=} {member.status=}")
        if member.status in ["member", "administrator", "creator"]:
            await context.bot.send_message(user_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ /calculate –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç–∞")
        else:
            raise Exception("Not subscribed")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await query.message.reply_text(
            "üö´ –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.",
            reply_markup=check_keyboard
        )

# --- –°—Ç–∞—Ä—Ç —Ä–∞—Å—á—ë—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def start_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ (‚ÇΩ/–º–µ—Å):")
    return CUR

# --- –ü–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å ---
async def cur_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['cur'] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:")
    return NEW

async def new_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new'] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    return COST

async def cost(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['cost'] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ –≥–æ–¥–∞—Ö:")
    return PERIOD

async def period(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    cur = context.user_data['cur']
    new = context.user_data['new']
    cost = context.user_data['cost']
    period = float(update.message.text)
    months = int(period * 12)
    cumulative_old, cumulative_new = 0, cost
    payback = None
    for m in range(1, months + 1):
        cumulative_old += cur
        cumulative_new += new
        if payback is None and cumulative_old - cumulative_new >= 0:
            payback = m
    payback_text = str(payback) if payback else "–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
    economy = round(cumulative_old - cumulative_new)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    rec = Record(
        date=datetime.now().strftime("%Y-%m-%d %H:%M"),
        user=update.effective_user.full_name,
        cur=cur, new=new, cost=cost,
        period=months, payback=payback_text, economy=economy
    )
    session.add(rec)
    session.commit()

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
        f"–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_text} –º–µ—Å.\n"
        f"–≠–∫–æ–Ω–æ–º–∏—è: {economy}‚ÇΩ"
    )
    return ConversationHandler.END

# --- –û—Ç–º–µ–Ω–∞ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == '__main__':
    app = ApplicationBuilder().token("8134172809:AAFydCkI2T32hYxL6y8zCVlTdp_lrL7hY18").build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("calculate", start_calculation)
        ],
        states={
            CUR: [MessageHandler(filters.TEXT & ~filters.COMMAND, cur_tariff)],
            NEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, new_tariff)],
            COST: [MessageHandler(filters.TEXT & ~filters.COMMAND, cost)],
            PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, period)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(check_subscription_callback, pattern="check_sub"))
    app.add_handler(conv_handler)
    app.run_polling()
    
